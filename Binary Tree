import java.util.*;
class Main {
	static class Node{
		int data;
		Node left;
		Node right;
		Node(int data)
		{
			this.data=data;
			this.left=null;
			this.right=null;
		}
	}
	static class BinaryTree{
		static int idx=-1;
		public static Node buildtree(int nodes[]){
			idx++;
			if(nodes[idx]==-1)
			{
				return null;
			}
			Node newnode=new Node(nodes[idx]);
			newnode.left=buildtree(nodes);
			newnode.right=buildtree(nodes);

			return newnode;
		}
	}
	public static void preorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		System.out.print(root.data+" ");
		preorder(root.left);
		preorder(root.right);
	}
	public static void Inorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		Inorder(root.left);
		System.out.print(root.data+" ");
		Inorder(root.right);
	}
	public static void postorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		postorder(root.left);
	
		postorder(root.right);
		System.out.print(root.data+" ");
	}
	public static void levelorder(Node root)
	{
		if(root==null)
		{
			return;
		}
		Queue<Node> q=new LinkedList<>();
		q.add(root);
		q.add(null);

		while(!q.isEmpty())
		{
			Node currNode =q.remove();
			if(currNode==null)
			{
				System.out.println();
				if(q.isEmpty())
				{
					break;
				}
				else
				{
					q.add(null);
				}
			}
			else{
				System.out.print(currNode.data+" ");
				if(currNode.left !=null)
				{
					q.add(currNode.left);
				}
				if(currNode.right !=null)
				{
					q.add(currNode.right);
				}
			}
		}
	}
	public static int countOfNodes(Node root)
	{
		if(root ==null)
		{
			return 0;
		}
		int leftNodes=countOfNodes(root.left);
		int rightNodes=countOfNodes(root.right);

		return leftNodes +rightNodes +1;
	}
	public static int sumOfNodes(Node root)
	{
		if(root ==null)
		{
			return 0;
		}
		int leftsum=sumOfNodes(root.left);
		int rightsum=sumOfNodes(root.right);

		return leftsum +rightsum +root.data;
	}
	public static int heightOfNodes(Node root)
	{
		if(root ==null)
		{
			return 0;
		}
		int leftheight=heightOfNodes(root.left);
		int rightheight=heightOfNodes(root.right);
		int treeheight=Math.max(leftheight,rightheight)+1;

		return treeheight;
	}
	public static int diameter(Node root)
	{
		if(root==null)
		{
			return 0;
		}
		int diam1=diameter(root.left);
		int diam2=diameter(root.right);
		int diam3=heightOfNodes(root.left)+heightOfNodes(root.right)+1;
		return Math.max(diam3,Math.max(diam1,diam2));
	}
	static class TreeInfo{
		int ht;
		int diam;
		TreeInfo(int ht,int diam)
		{
			this.ht=ht;
			this.diam=diam;
		}
	}
	public static TreeInfo diameter2(Node root)
	{
		if(root==null)
		{
			return new TreeInfo(0,0);
		}
		TreeInfo left=diameter2(root.left);
		TreeInfo right=diameter2(root.right);
		int myheight=Math.max(left.ht,right.ht)+1;
		int diam1=left.diam;
		int diam2=right.diam;
		int diam3=left.ht+right.ht+1;

		int mydiam=Math.max(Math.max(diam1,diam2),diam3);
		TreeInfo myInfo=new TreeInfo(myheight,mydiam);
		return myInfo;
		

	}


	public static void main(String args[])
	{
		int nodes[]={1,2,4,-1,-1,5,-1,-1,3,-1,6,-1,-1};
		BinaryTree tree =new BinaryTree();
		Node root=tree.buildtree(nodes);
		//System.out.println(root.data);
		//preorder(root);
		//Inorder(root);
		//postorder(root);
		//System.out.println(" ");
		levelorder(root);
		//System.out.println(countOfNodes(root));
		//System.out.println(sumOfNodes(root));
		//System.out.println(heightOfNodes(root));
		System.out.println(diameter2(root).diam);
	}	
}
